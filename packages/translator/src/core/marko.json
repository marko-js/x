{
  "<import>": {
    "node-factory": "./parse-import",
    "parse-options": {
      "rootOnly": true,
      "rawOpenTag": true,
      "openTagOnly": true,
      "ignoreAttributes": true,
      "relaxRequireCommas": true
    },
    "autocomplete": [
      {
        "displayText": "import <scope> from \"<path>\"",
        "description": "Use to import external modules, follows the same syntax as JavaScript imports.",
        "snippet": "import ${2} from \"${1:path}\"",
        "descriptionMoreURL": "https://markojs.com/docs/syntax/#importing-external-files"
      }
    ]
  },
  "<if>": {
    "code-generator": "./condition/translate-if",
    "attributes": {},
    "autocomplete": [
      {
        "snippet": "if=${1:condition}",
        "description": "Use to display content only if the condition is met.",
        "descriptionMoreURL": "https://markojs.com/docs/core-tags/#if-else-if-else"
      }
    ]
  },
  "<else-if>": {
    "code-generator": "./condition/translate-else-if",
    "attributes": {},
    "autocomplete": [
      {
        "snippet": "else-if=${1:condition}",
        "description": "Use after an <if> or <else-if> tag to display content if those conditions do not match and this one does.",
        "descriptionMoreURL": "https://markojs.com/docs/core-tags/#if-else-if-else"
      }
    ]
  },
  "<else>": {
    "code-generator": "./condition/translate-else",
    "attributes": {},
    "autocomplete": [
      {
        "description": "Use after an <if> or <else-if> tag to display content if those conditions do not match.",
        "descriptionMoreURL": "https://markojs.com/docs/core-tags/#if-else-if-else"
      }
    ]
  },
  "<for>": {
    "code-generator": "./translate-for",
    "@of": {
      "type": "expression",
      "autocomplete": [
        {
          "description": "Iterates over a list of items."
        }
      ]
    },
    "@in": {
      "type": "expression",
      "autocomplete": [
        {
          "description": "Iterates over the keys and values of an object."
        }
      ]
    },
    "@to": {
      "type": "number",
      "autocomplete": [
        {
          "description": "Iterates up to the provided number (inclusive)"
        }
      ]
    },
    "@from": {
      "type": "number",
      "autocomplete": [
        {
          "description": "Iterates starting from the provided number (inclusive)"
        }
      ]
    },
    "@step": {
      "type": "number",
      "autocomplete": [
        {
          "description": "The amount to increment during each interation (with from/to)"
        }
      ]
    },
    "autocomplete": [
      {
        "snippet": "for|${1:value, index}| of=${3:array}",
        "description": "Use to iterate over lists, object properties, or between ranges.",
        "descriptionMoreURL": "https://markojs.com/docs/core-tags/#iterating-over-a-list"
      },
      {
        "snippet": "for|${1:name, value}| in=${3:object}",
        "descriptionMoreURL": "https://markojs.com/docs/core-tags/#iterating-over-an-objects-properties"
      },
      {
        "snippet": "for|${1:index}| from=${2:number} to=${3:number} step=${4:number}",
        "descriptionMoreURL": "https://markojs.com/docs/core-tags/#iterating-between-a-range-of-numbers"
      }
    ]
  },
  "<let>": {
    "code-generator": "./translate-let",
    "attributes": {},
    "autocomplete": [
      {
        "description": "Use to create an mutable binding.",
        "descriptionMoreURL": "https://markojs.com/docs/core-tags/#let"
      }
    ]
  },
  "<const>": {
    "code-generator": "./translate-const",
    "attributes": {},
    "autocomplete": [
      {
        "description": "Use to create an constant binding.",
        "descriptionMoreURL": "https://markojs.com/docs/core-tags/#const"
      }
    ]
  },
  "<html-comment>": {
    "code-generator": "./translate-html-comment",
    "parse-options": {
      "state": "parsed-text"
    },
    "attributes": {},
    "autocomplete": [
      {
        "description": "Use to create an html comment that is not stripped from the output.",
        "descriptionMoreURL": "https://markojs.com/docs/core-tags/#html-comment"
      }
    ]
  },
  "<tag>": {
    "code-generator": "./translate-tag",
    "attributes": {},
    "autocomplete": [
      {
        "displayText": "tag/<name>|<params>|",
        "description": "Creates a reusable fragment within the template.",
        "snippet": "tag/${1:name}|${2:param1, param2}|",
        "descriptionMoreURL": "https://markojs.com/docs/core-tags/#tag"
      }
    ]
  },
  "<set>": {
    "code-generator": "./translate-set",
    "autocomplete": [
      {
        "displayText": "set=<value>",
        "description": "Sets a value which can be read from a child template.",
        "snippet": "set=${1:value}",
        "descriptionMoreURL": "https://markojs.com/docs/core-tags/#set"
      }
    ]
  },
  "<get>": {
    "code-generator": "./translate-get",
    "autocomplete": [
      {
        "displayText": "get/<name>=\"<from>\"",
        "description": "Gets a value provided from another template.",
        "snippet": "get/${1:name}=\"${2:from}\"",
        "descriptionMoreURL": "https://markojs.com/docs/core-tags/#get"
      }
    ]
  }
}
